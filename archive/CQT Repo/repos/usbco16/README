This file contains some things to remember to check for the coincidence
thingie  to work. This version is for the USB adapter card attached to the
CO16 unit...

There are a few components on the host computer side in this directory:

- The kernel driver. This driver associates itself with a USB adapter devide
  (ID: 04b4:1237) and generates a device node entry /dev/ioboards/usbco16_x
  where x stands for 0,1,2,.. if several adapters are plugged in.
  This driver provides an interface to the card that allows to set some
  parameters like delay DAC settings and integration times, and provides a
  memory mapped DMA mechanism to receive data from the device. Essentially, it
  reserves a large ring buffer into which events are stored as subsequent
  16-bit-patterns and makes this buffer accessible from user space.

- The co16usb program in the apps directory. This C code collects events
  from the co16 card, histograms them over a specified time and returns the
  histogrammed value. That code has the same functionality as the previous
  co16 program working with the nudaq card, but accesses it via the USB
  interface. Differences are a new -U option, that allows to specify a
  different device file from the default device /dev/ioboards/usbco16_0, which
  would be useful if more than one device is attached to the host.
  Another difference to the old co16 program is the restriction to integration
  times that are a multiple of 10 msec. This is due to the granularity of the
  timer in the adapter device.

- Various graphical user interfaces. The Tcl/Tk scripts in the apps directory
  got adapted to work with the USB card; some code cleanup took place as well.

ToDo:
- Make a proper howto for the co16 application. For now, look at the header of
  the co16.c source code in the apps directory
- in the udev mechanism/kernel driver, generate a device name that contains
  the serial number.
- find the application program that allowed to generate a stream of detection
  events into a file without histogramming.
