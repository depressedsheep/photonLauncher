This directory contains a simple version of a digital output card, based on
the USB part of the timestamp card. It is by en large borrowed from the
pattern generator loader program pg3a.c, similarly as the firmware of the
card.

The large bandwidth data transfer is established with a write method on the
user side (blocking? need to find out...), a few parameters can be adjusted
with ioctl commands; see firware (usbdigiout) for details. Compiles under Suse
10.3 x86_64

chk, 28.6.09

directory content

2.6/      directory containing the kernel driver and corresponding support
	  files. The usbdigiout_io.h contains the ioctl
	  definitions needed for any application talking to the device.

hotplug/  directory containing the sources for the hotplugging method.

Makefile  Script to do what you most likely want to do with these files


Installation:

Before you start to install or compile anything, make sure the directory is
located in a reasonably stable place, and that this directory is not very
likely to removed to any other place as the driver will be loaded from
hotplugging out of this directory structure. Here, this directory should
reside in /home/qitlab/programs/.

Then, you have to compile the driver itself. Remember that for the moment,
there is only a port for a 2.6 kernel, and no backport for the 2.4 machines
(not sure I want to do this anyway). The compilation is done from themain
driver directory by saying

        make

Then, the hotplugging machinery needs to be installed. Most systems we have
uses the udev method, which is a generalized driver insertion and dynamic
device generation tool, so this is the only impemented method.

For SuSE >10.0, you install the hotplugging stuff with the command (as root)

    make udev

This installs a udev rule file and a device driver loader into the directory
/etc/udev/rules.d/ of a unified hotplugging mechanism used in this
distribution.


By now, everything should be done. You can check the success of the endeavour
by plugging in a device and looking for a newly created device file
/dev/ioboards/digiout0.

See .c driver file for details.

Device functionality: 

The driver provides a write method to dump a sequence of 16bit wide words onto
the parallel output of the FX2 usb chip; the clock is supplied either by an
internal counter (not very fast) or an external source; the choice is done via
hardware. Some IOCTL commands are supplied to control the device, and it
allows both blocking and non-blocking behaviour to eventually react to the
throughput due to an external clock.

The simplest way to operate the device is just to copy a file containing the
pattern into the device /dev/ioboards/digiout0 or whatever the number is.



